{"ast":null,"code":"var checkInViewIntersectionObserver=function checkInViewIntersectionObserver(_ref){var target=_ref.target,distanceFromEnd=_ref.distanceFromEnd,callback=_ref.callback;var _funCallback=function _funCallback(entries,observer){entries.map(function(entry){if(entry.isIntersecting){// NEED CALLBACK WILL RETURN BOOLEAN ---- IF TRUE WE WILL UNOBSERVER AND FALSE IS NO\nvar unobserve=callback();unobserve&&observer.unobserve(entry.target);}return true;});};// _checkBrowserSupport-----\nif(typeof window.IntersectionObserver==='undefined'){console.error('window.IntersectionObserver === undefined! => Your Browser is Notsupport');return;}var options={root:null,rootMargin:\"\".concat(distanceFromEnd,\"px 0px\"),threshold:0};var observer=new IntersectionObserver(_funCallback,options);target&&observer.observe(target);};export default checkInViewIntersectionObserver;","map":{"version":3,"names":["checkInViewIntersectionObserver","target","distanceFromEnd","callback","_funCallback","entries","observer","map","entry","isIntersecting","unobserve","window","IntersectionObserver","console","error","options","root","rootMargin","threshold","observe"],"sources":["/Users/lanceway/Downloads/ALF-update-main/src/utils/isInViewPortIntersectionObserver.ts"],"sourcesContent":["export interface InviewPortType {\n  distanceFromEnd: number;\n  callback: () => boolean;\n  target: HTMLElement;\n}\n\nconst checkInViewIntersectionObserver = ({\n  target,\n  distanceFromEnd,\n  callback,\n}: InviewPortType) => {\n  const _funCallback: IntersectionObserverCallback = (\n    entries: IntersectionObserverEntry[],\n    observer: IntersectionObserver\n  ) => {\n    entries.map((entry: IntersectionObserverEntry) => {\n      if (entry.isIntersecting) {\n        // NEED CALLBACK WILL RETURN BOOLEAN ---- IF TRUE WE WILL UNOBSERVER AND FALSE IS NO\n        const unobserve = callback();\n        unobserve && observer.unobserve(entry.target);\n      }\n      return true;\n    });\n  };\n\n  // _checkBrowserSupport-----\n  if (typeof window.IntersectionObserver === 'undefined') {\n    console.error(\n      'window.IntersectionObserver === undefined! => Your Browser is Notsupport'\n    );\n    return;\n  }\n  const options = {\n    root: null,\n    rootMargin: `${distanceFromEnd}px 0px`,\n    threshold: 0,\n  };\n  const observer = new IntersectionObserver(_funCallback, options);\n  target && observer.observe(target);\n};\n\nexport default checkInViewIntersectionObserver;\n"],"mappings":"AAMA,GAAMA,gCAA+B,CAAG,QAAlCA,gCAAkC,MAIlB,IAHpBC,OAGoB,MAHpBA,MAGoB,CAFpBC,eAEoB,MAFpBA,eAEoB,CADpBC,QACoB,MADpBA,QACoB,CACpB,GAAMC,aAA0C,CAAG,QAA7CA,aAA6C,CACjDC,OADiD,CAEjDC,QAFiD,CAG9C,CACHD,OAAO,CAACE,GAAR,CAAY,SAACC,KAAD,CAAsC,CAChD,GAAIA,KAAK,CAACC,cAAV,CAA0B,CACxB;AACA,GAAMC,UAAS,CAAGP,QAAQ,EAA1B,CACAO,SAAS,EAAIJ,QAAQ,CAACI,SAAT,CAAmBF,KAAK,CAACP,MAAzB,CAAb,CACD,CACD,MAAO,KAAP,CACD,CAPD,EAQD,CAZD,CAcA;AACA,GAAI,MAAOU,OAAM,CAACC,oBAAd,GAAuC,WAA3C,CAAwD,CACtDC,OAAO,CAACC,KAAR,CACE,0EADF,EAGA,OACD,CACD,GAAMC,QAAO,CAAG,CACdC,IAAI,CAAE,IADQ,CAEdC,UAAU,WAAKf,eAAL,UAFI,CAGdgB,SAAS,CAAE,CAHG,CAAhB,CAKA,GAAMZ,SAAQ,CAAG,GAAIM,qBAAJ,CAAyBR,YAAzB,CAAuCW,OAAvC,CAAjB,CACAd,MAAM,EAAIK,QAAQ,CAACa,OAAT,CAAiBlB,MAAjB,CAAV,CACD,CAjCD,CAmCA,cAAeD,gCAAf"},"metadata":{},"sourceType":"module"}