{"ast":null,"code":"const checkInViewIntersectionObserver = _ref => {\n  let {\n    target,\n    distanceFromEnd,\n    callback\n  } = _ref;\n\n  const _funCallback = (entries, observer) => {\n    entries.map(entry => {\n      if (entry.isIntersecting) {\n        // NEED CALLBACK WILL RETURN BOOLEAN ---- IF TRUE WE WILL UNOBSERVER AND FALSE IS NO\n        const unobserve = callback();\n        unobserve && observer.unobserve(entry.target);\n      }\n\n      return true;\n    });\n  }; // _checkBrowserSupport-----\n\n\n  if (typeof window.IntersectionObserver === 'undefined') {\n    console.error('window.IntersectionObserver === undefined! => Your Browser is Notsupport');\n    return;\n  }\n\n  const options = {\n    root: null,\n    rootMargin: `${distanceFromEnd}px 0px`,\n    threshold: 0\n  };\n  const observer = new IntersectionObserver(_funCallback, options);\n  target && observer.observe(target);\n};\n\nexport default checkInViewIntersectionObserver;","map":{"version":3,"names":["checkInViewIntersectionObserver","target","distanceFromEnd","callback","_funCallback","entries","observer","map","entry","isIntersecting","unobserve","window","IntersectionObserver","console","error","options","root","rootMargin","threshold","observe"],"sources":["/Users/lanceway/Downloads/ALF-update-main/src/utils/isInViewPortIntersectionObserver.ts"],"sourcesContent":["export interface InviewPortType {\n  distanceFromEnd: number;\n  callback: () => boolean;\n  target: HTMLElement;\n}\n\nconst checkInViewIntersectionObserver = ({\n  target,\n  distanceFromEnd,\n  callback,\n}: InviewPortType) => {\n  const _funCallback: IntersectionObserverCallback = (\n    entries: IntersectionObserverEntry[],\n    observer: IntersectionObserver\n  ) => {\n    entries.map((entry: IntersectionObserverEntry) => {\n      if (entry.isIntersecting) {\n        // NEED CALLBACK WILL RETURN BOOLEAN ---- IF TRUE WE WILL UNOBSERVER AND FALSE IS NO\n        const unobserve = callback();\n        unobserve && observer.unobserve(entry.target);\n      }\n      return true;\n    });\n  };\n\n  // _checkBrowserSupport-----\n  if (typeof window.IntersectionObserver === 'undefined') {\n    console.error(\n      'window.IntersectionObserver === undefined! => Your Browser is Notsupport'\n    );\n    return;\n  }\n  const options = {\n    root: null,\n    rootMargin: `${distanceFromEnd}px 0px`,\n    threshold: 0,\n  };\n  const observer = new IntersectionObserver(_funCallback, options);\n  target && observer.observe(target);\n};\n\nexport default checkInViewIntersectionObserver;\n"],"mappings":"AAMA,MAAMA,+BAA+B,GAAG,QAIlB;EAAA,IAJmB;IACvCC,MADuC;IAEvCC,eAFuC;IAGvCC;EAHuC,CAInB;;EACpB,MAAMC,YAA0C,GAAG,CACjDC,OADiD,EAEjDC,QAFiD,KAG9C;IACHD,OAAO,CAACE,GAAR,CAAaC,KAAD,IAAsC;MAChD,IAAIA,KAAK,CAACC,cAAV,EAA0B;QACxB;QACA,MAAMC,SAAS,GAAGP,QAAQ,EAA1B;QACAO,SAAS,IAAIJ,QAAQ,CAACI,SAAT,CAAmBF,KAAK,CAACP,MAAzB,CAAb;MACD;;MACD,OAAO,IAAP;IACD,CAPD;EAQD,CAZD,CADoB,CAepB;;;EACA,IAAI,OAAOU,MAAM,CAACC,oBAAd,KAAuC,WAA3C,EAAwD;IACtDC,OAAO,CAACC,KAAR,CACE,0EADF;IAGA;EACD;;EACD,MAAMC,OAAO,GAAG;IACdC,IAAI,EAAE,IADQ;IAEdC,UAAU,EAAG,GAAEf,eAAgB,QAFjB;IAGdgB,SAAS,EAAE;EAHG,CAAhB;EAKA,MAAMZ,QAAQ,GAAG,IAAIM,oBAAJ,CAAyBR,YAAzB,EAAuCW,OAAvC,CAAjB;EACAd,MAAM,IAAIK,QAAQ,CAACa,OAAT,CAAiBlB,MAAjB,CAAV;AACD,CAjCD;;AAmCA,eAAeD,+BAAf"},"metadata":{},"sourceType":"module"}